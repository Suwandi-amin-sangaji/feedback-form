{"ast":null,"code":"export default {\n  name: 'App',\n  data() {\n    return {\n      stars: [{\n        id: 1,\n        label: 'Very Poor'\n      }, {\n        id: 2,\n        label: 'Poor'\n      }, {\n        id: 3,\n        label: 'Average'\n      }, {\n        id: 4,\n        label: 'Good'\n      }, {\n        id: 5,\n        label: 'Excellent'\n      }],\n      selectedRating: null,\n      showSuccessAlert: false\n    };\n  },\n  methods: {\n    setRating(rating) {\n      this.selectedRating = rating;\n    },\n    async submitFeedback() {\n      if (!this.selectedRating) {\n        alert('Please select a rating before submitting.');\n        return;\n      }\n      const feedbackData = {\n        rating: this.selectedRating,\n        comments: '' // You can add comments field if needed\n      };\n      try {\n        const response = await fetch('/api/feedback/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(feedbackData)\n        });\n        if (response.ok) {\n          this.showSuccessAlert = true;\n          this.selectedRating = null;\n        } else {\n          throw new Error('Failed to submit feedback');\n        }\n      } catch (error) {\n        console.error('Error submitting feedback:', error);\n        // Handle error state in your UI\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","stars","id","label","selectedRating","showSuccessAlert","methods","setRating","rating","submitFeedback","alert","feedbackData","comments","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","console"],"sources":["/home/wandy/Documents/Technical/frontend/feedback-form/src/components/FeedbackForm.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <div class=\"survey-container\">\n      <h1>How would you rate your satisfaction with our product?</h1>\n      <div class=\"rating-system\">\n        <div \n          v-for=\"star in stars\" \n          :key=\"star.id\" \n          class=\"star-container\"\n        >\n          <span \n            class=\"star\" \n            @click=\"setRating(star.id)\"\n            :class=\"{ 'rated': star.id <= selectedRating }\"\n          >\n            &#9734;\n          </span>\n          <div class=\"star-label\">\n            <span>{{ star.id }}</span>\n            <span>{{ star.label }}</span>\n          </div>\n        </div>\n      </div>\n      <button @click=\"submitFeedback\">Submit</button>\n    </div>\n    <!-- Success alert -->\n    <div v-if=\"showSuccessAlert\" class=\"success-alert\">\n      <p>Feedback submitted successfully!</p>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'App',\n  data() {\n    return {\n      stars: [\n        { id: 1, label: 'Very Poor' },\n        { id: 2, label: 'Poor' },\n        { id: 3, label: 'Average' },\n        { id: 4, label: 'Good' },\n        { id: 5, label: 'Excellent' },\n      ],\n      selectedRating: null,\n      showSuccessAlert: false,\n    };\n  },\n  methods: {\n    setRating(rating) {\n      this.selectedRating = rating;\n    },\n    async submitFeedback() {\n      if (!this.selectedRating) {\n        alert('Please select a rating before submitting.');\n        return;\n      }\n\n      const feedbackData = {\n        rating: this.selectedRating,\n        comments: '', // You can add comments field if needed\n      };\n\n      try {\n        const response = await fetch('/api/feedback/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(feedbackData),\n        });\n\n        if (response.ok) {\n          this.showSuccessAlert = true;\n          this.selectedRating = null;\n        } else {\n          throw new Error('Failed to submit feedback');\n        }\n      } catch (error) {\n        console.error('Error submitting feedback:', error);\n        // Handle error state in your UI\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  color: #2c3e50;\n}\n\n.survey-container {\n  width: 600px;\n  margin: 0 auto;\n}\n\n.rating-system {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 20px;\n}\n\n.star-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.star {\n  font-size: 2em;\n  cursor: pointer;\n  transition: color 0.3s;\n}\n\n.star:hover,\n.rated {\n  color: gold;\n}\n\n.star-label {\n  text-align: center;\n}\n\nbutton {\n  background-color: #4caf50;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #45a049;\n}\n\n.success-alert {\n  position: fixed;\n  z-index: 1;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  background-color: #4caf50;\n  color: white;\n  padding: 20px;\n  border-radius: 5px;\n}\n</style>\n"],"mappings":"AAiCA,eAAe;EACbA,IAAI,EAAE,KAAK;EACXC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,CACL;QAAEC,EAAE,EAAE,CAAC;QAAEC,KAAK,EAAE;MAAY,CAAC,EAC7B;QAAED,EAAE,EAAE,CAAC;QAAEC,KAAK,EAAE;MAAO,CAAC,EACxB;QAAED,EAAE,EAAE,CAAC;QAAEC,KAAK,EAAE;MAAU,CAAC,EAC3B;QAAED,EAAE,EAAE,CAAC;QAAEC,KAAK,EAAE;MAAO,CAAC,EACxB;QAAED,EAAE,EAAE,CAAC;QAAEC,KAAK,EAAE;MAAY,CAAC,CAC9B;MACDC,cAAc,EAAE,IAAI;MACpBC,gBAAgB,EAAE;IACpB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,SAASA,CAACC,MAAM,EAAE;MAChB,IAAI,CAACJ,cAAa,GAAII,MAAM;IAC9B,CAAC;IACD,MAAMC,cAAcA,CAAA,EAAG;MACrB,IAAI,CAAC,IAAI,CAACL,cAAc,EAAE;QACxBM,KAAK,CAAC,2CAA2C,CAAC;QAClD;MACF;MAEA,MAAMC,YAAW,GAAI;QACnBH,MAAM,EAAE,IAAI,CAACJ,cAAc;QAC3BQ,QAAQ,EAAE,EAAE,CAAE;MAChB,CAAC;MAED,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,gBAAgB,EAAE;UAC7CC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,YAAY;QACnC,CAAC,CAAC;QAEF,IAAIE,QAAQ,CAACO,EAAE,EAAE;UACf,IAAI,CAACf,gBAAe,GAAI,IAAI;UAC5B,IAAI,CAACD,cAAa,GAAI,IAAI;QAC5B,OAAO;UACL,MAAM,IAAIiB,KAAK,CAAC,2BAA2B,CAAC;QAC9C;MACF,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClD;MACF;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}