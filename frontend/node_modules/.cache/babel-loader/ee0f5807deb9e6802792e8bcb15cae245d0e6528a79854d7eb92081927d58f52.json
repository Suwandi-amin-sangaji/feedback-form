{"ast":null,"code":"import { ref } from 'vue';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome';\nlibrary.add(faStar);\nexport default {\n  components: {\n    FontAwesomeIcon\n  },\n  setup() {\n    const showSuccessAlert = ref(false);\n    const feedback = ref({\n      rating: null,\n      comments: ''\n    });\n    const submitFeedback = async () => {\n      try {\n        const response = await fetch('/api/feedback/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(feedback.value)\n        });\n        const data = await response.json();\n        console.log('Feedback submitted:', data);\n\n        // Show success alert\n        showSuccessAlert.value = true;\n\n        // Reset form fields after successful submission\n        feedback.value.rating = null;\n        feedback.value.comments = '';\n      } catch (error) {\n        console.error('Error submitting feedback:', error);\n        // Handle error state in your UI\n      }\n    };\n    return {\n      showSuccessAlert,\n      feedback,\n      submitFeedback\n    };\n  }\n};","map":{"version":3,"names":["ref","library","faStar","FontAwesomeIcon","add","components","setup","showSuccessAlert","feedback","rating","comments","submitFeedback","response","fetch","method","headers","body","JSON","stringify","value","data","json","console","log","error"],"sources":["/home/wandy/Documents/Technical/frontend/feedback-form/src/components/FeedbackForm.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>How would you rate your satisfaction with our product?</h2>\n    <form @submit.prevent=\"submitFeedback\">\n      <label>\n        Rating:\n        <select v-model=\"feedback.rating\">\n          <option v-for=\"n in 5\" :key=\"n\" :value=\"n\">{{ n }}</option>\n        </select>\n      </label>\n      <label>\n        Comments:\n        <textarea v-model=\"feedback.comments\"></textarea>\n      </label>\n      <button type=\"submit\">Submit</button>\n    </form>\n\n    <!-- Success alert -->\n    <div v-if=\"showSuccessAlert\" class=\"success-alert\">\n      <span class=\"close\" @click=\"showSuccessAlert = false\">&times;</span>\n      <p>Feedback submitted successfully!</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome';\n\nlibrary.add(faStar);\n\nexport default {\n  components: {\n    FontAwesomeIcon,\n  },\n  setup() {\n    const showSuccessAlert = ref(false);\n    const feedback = ref({\n      rating: null,\n      comments: '',\n    });\n\n    const submitFeedback = async () => {\n      try {\n        const response = await fetch('/api/feedback/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(feedback.value),\n        });\n        const data = await response.json();\n        console.log('Feedback submitted:', data);\n\n        // Show success alert\n        showSuccessAlert.value = true;\n\n        // Reset form fields after successful submission\n        feedback.value.rating = null;\n        feedback.value.comments = '';\n      } catch (error) {\n        console.error('Error submitting feedback:', error);\n        // Handle error state in your UI\n      }\n    };\n\n    return {\n      showSuccessAlert,\n      feedback,\n      submitFeedback,\n    };\n  },\n};\n</script>\n\n<style scoped>\n/* Add your scoped styles here */\n.success-alert {\n  position: fixed;\n  z-index: 1;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  background-color: #4caf50;\n  color: white;\n  padding: 20px;\n  border-radius: 5px;\n}\n\n.success-alert .close {\n  position: absolute;\n  top: 0;\n  right: 0;\n  padding: 10px;\n  cursor: pointer;\n}\n</style>\n"],"mappings":"AA0BA,SAASA,GAAE,QAAS,KAAK;AACzB,SAASC,OAAM,QAAS,mCAAmC;AAC3D,SAASC,MAAK,QAAS,mCAAmC;AAC1D,SAASC,eAAc,QAAS,8BAA8B;AAE9DF,OAAO,CAACG,GAAG,CAACF,MAAM,CAAC;AAEnB,eAAe;EACbG,UAAU,EAAE;IACVF;EACF,CAAC;EACDG,KAAKA,CAAA,EAAG;IACN,MAAMC,gBAAe,GAAIP,GAAG,CAAC,KAAK,CAAC;IACnC,MAAMQ,QAAO,GAAIR,GAAG,CAAC;MACnBS,MAAM,EAAE,IAAI;MACZC,QAAQ,EAAE;IACZ,CAAC,CAAC;IAEF,MAAMC,cAAa,GAAI,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,gBAAgB,EAAE;UAC7CC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,QAAQ,CAACW,KAAK;QACrC,CAAC,CAAC;QACF,MAAMC,IAAG,GAAI,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QAClCC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEH,IAAI,CAAC;;QAExC;QACAb,gBAAgB,CAACY,KAAI,GAAI,IAAI;;QAE7B;QACAX,QAAQ,CAACW,KAAK,CAACV,MAAK,GAAI,IAAI;QAC5BD,QAAQ,CAACW,KAAK,CAACT,QAAO,GAAI,EAAE;MAC9B,EAAE,OAAOc,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClD;MACF;IACF,CAAC;IAED,OAAO;MACLjB,gBAAgB;MAChBC,QAAQ;MACRG;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}