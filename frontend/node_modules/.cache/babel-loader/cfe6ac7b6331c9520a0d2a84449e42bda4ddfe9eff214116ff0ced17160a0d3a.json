{"ast":null,"code":"import RatingSlider from './RatingSlider.vue';\nimport StarRating from './StarRating.vue';\nexport default {\n  name: 'ModalRating',\n  components: {\n    RatingSlider,\n    StarRating\n  },\n  props: {\n    showModal: {\n      type: Boolean,\n      required: true\n    }\n  },\n  data() {\n    return {\n      stars: [{\n        id: 1\n      }, {\n        id: 2\n      }, {\n        id: 3\n      }, {\n        id: 4\n      }, {\n        id: 5\n      }],\n      selectedRating: null\n    };\n  },\n  methods: {\n    setRating(rating) {\n      this.selectedRating = rating;\n    },\n    async submitFeedback() {\n      if (!this.selectedRating) {\n        alert('Please select a rating before submitting.');\n        return;\n      }\n      const feedbackData = {\n        rating: this.selectedRating\n      };\n      try {\n        const response = await fetch('/api/feedback/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(feedbackData)\n        });\n        if (response.ok) {\n          this.$emit('close'); // Emit event to close modal on successful submission\n          alert('Thank you for your feedback!');\n        } else {\n          throw new Error('Failed to submit feedback');\n        }\n      } catch (error) {\n        console.error('Error submitting feedback:', error);\n        // Handle error state in your UI\n      }\n    }\n  }\n};","map":{"version":3,"names":["RatingSlider","StarRating","name","components","props","showModal","type","Boolean","required","data","stars","id","selectedRating","methods","setRating","rating","submitFeedback","alert","feedbackData","response","fetch","method","headers","body","JSON","stringify","ok","$emit","Error","error","console"],"sources":["/home/wandy/Documents/Technical/frontend/src/components/ModalRating.vue"],"sourcesContent":["<template>\n    <div class=\"modal\" v-if=\"showModal\">\n      <div class=\"modal-content\">\n        <h2 class=\"modal-title text-xl font-semibold mb-4\">How would you rate your satisfaction with our product?</h2>\n        \n        <!-- Rating Slider -->\n        <RatingSlider v-model=\"selectedRating\" />\n  \n        <!-- Star Rating System -->\n        <StarRating :stars=\"stars\" :selectedRating=\"selectedRating\" @setRating=\"setRating\" />\n  \n        <!-- Rating Range Labels -->\n        <div class=\"flex items-center justify-between mt-2 text-sm text-gray-600\">\n          <span>Very Dissatisfied</span>\n          <span>Very Satisfied</span>\n        </div>\n        \n        <!-- Submit Button -->\n        <button @click=\"submitFeedback\" class=\"btn-submit mt-4\">Submit</button>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import RatingSlider from './RatingSlider.vue';\n  import StarRating from './StarRating.vue';\n  \n  export default {\n    name: 'ModalRating',\n    components: {\n      RatingSlider,\n      StarRating,\n    },\n    props: {\n      showModal: {\n        type: Boolean,\n        required: true,\n      },\n    },\n    data() {\n      return {\n        stars: [\n          { id: 1 },\n          { id: 2 },\n          { id: 3 },\n          { id: 4 },\n          { id: 5 },\n        ],\n        selectedRating: null,\n      };\n    },\n    methods: {\n      setRating(rating) {\n        this.selectedRating = rating;\n      },\n      async submitFeedback() {\n        if (!this.selectedRating) {\n          alert('Please select a rating before submitting.');\n          return;\n        }\n  \n        const feedbackData = {\n          rating: this.selectedRating,\n        };\n  \n        try {\n          const response = await fetch('/api/feedback/', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(feedbackData),\n          });\n  \n          if (response.ok) {\n            this.$emit('close'); // Emit event to close modal on successful submission\n            alert('Thank you for your feedback!');\n          } else {\n            throw new Error('Failed to submit feedback');\n          }\n        } catch (error) {\n          console.error('Error submitting feedback:', error);\n          // Handle error state in your UI\n        }\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  /* Your scoped styles here */\n  </style>\n  "],"mappings":"AAwBE,OAAOA,YAAW,MAAO,oBAAoB;AAC7C,OAAOC,UAAS,MAAO,kBAAkB;AAEzC,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,UAAU,EAAE;IACVH,YAAY;IACZC;EACF,CAAC;EACDG,KAAK,EAAE;IACLC,SAAS,EAAE;MACTC,IAAI,EAAEC,OAAO;MACbC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,CACL;QAAEC,EAAE,EAAE;MAAE,CAAC,EACT;QAAEA,EAAE,EAAE;MAAE,CAAC,EACT;QAAEA,EAAE,EAAE;MAAE,CAAC,EACT;QAAEA,EAAE,EAAE;MAAE,CAAC,EACT;QAAEA,EAAE,EAAE;MAAE,CAAC,CACV;MACDC,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,SAASA,CAACC,MAAM,EAAE;MAChB,IAAI,CAACH,cAAa,GAAIG,MAAM;IAC9B,CAAC;IACD,MAAMC,cAAcA,CAAA,EAAG;MACrB,IAAI,CAAC,IAAI,CAACJ,cAAc,EAAE;QACxBK,KAAK,CAAC,2CAA2C,CAAC;QAClD;MACF;MAEA,MAAMC,YAAW,GAAI;QACnBH,MAAM,EAAE,IAAI,CAACH;MACf,CAAC;MAED,IAAI;QACF,MAAMO,QAAO,GAAI,MAAMC,KAAK,CAAC,gBAAgB,EAAE;UAC7CC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,YAAY;QACnC,CAAC,CAAC;QAEF,IAAIC,QAAQ,CAACO,EAAE,EAAE;UACf,IAAI,CAACC,KAAK,CAAC,OAAO,CAAC,EAAE;UACrBV,KAAK,CAAC,8BAA8B,CAAC;QACvC,OAAO;UACL,MAAM,IAAIW,KAAK,CAAC,2BAA2B,CAAC;QAC9C;MACF,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClD;MACF;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}